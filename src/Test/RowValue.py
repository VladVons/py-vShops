Data = '-- in: aLangId, aParentIdRoot, CondParentIds\nwith recursive wrpc as (\n    select\n        rpc.id,\n        rpc.parent_id,\n        1 as deep,\n        ARRAY[rpc.id] as path_id\n    from\n        ref_product0_category rpc\n    where\n        (rpc.enabled) and\n        (rpc.parent_id = 0)\n\n    union all\n\n    select\n        rpc.id,\n        rpc.parent_id,\n        wrpc.deep + 1,\n        wrpc.path_id  || array[rpc.id]\n    from\n        ref_product0_category rpc\n    join\n        wrpc on\n        (rpc.parent_id = wrpc.id)\n    where\n        (rpc.enabled)\n),\ncategory_products as (\n    select\n        rpc.cat_id,\n        count(*) as products\n    from\n        ref_product0_to_category rptc\n    left join\n        ref_product rp on\n        (rptc.product_id = rp.id)\n    left join\n        ref_tenant rt\n        on (rp.tenant_id = rt.id)\n    left join\n        (\n            select\n                id,\n                unnest(path_id) as cat_id\n            from wrpc\n        ) rpc\n        on (rptc.category_id = rpc.id)\n    where \n        (rp.enabled) and\n        (rt.enabled)\n    group by\n        rpc.cat_id\n)\n\nselect\n    wrpc.id,\n    wrpc.parent_id,\n    wrpc.deep,\n    wrpc.path_id,\n    cp.products,\n    rpcl.title\nfrom\n     wrpc\nleft join\n    category_products cp\n    on (wrpc.id = cp.cat_id)\nleft join\n    ref_product0_category_lang rpcl\n    on (wrpc.id = rpcl.category_id and rpcl.lang_id = 1)\nwhere\n    (cp.products is not null)\n    \norder by \n    deep, \n    title'
with open('Query.txt', 'w') as F:
    F.write(Data)

