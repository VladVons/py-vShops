from Inc.Util.Obj import DeepGetByList


q1 = {
    "size": [
        ["4820052669897", ""], 
        ["Висота, см", "7.9"], 
        ["Глибина, см", "5.4"], 
        ["Ширина, см", "5.6"], 
        ["Вага брутто, кг", "0.218"], 
        ["4820052669880", "Коробка (24 шт)"], 
        ["Висота, см", "8.6"], 
        ["Глибина, см", "42.8"], 
        ["Ширина, см", "17.8"], 
        ["Вага брутто, кг", "5.388"], 
        ["Ознака викладки шоубокс", "НІ"]
    ], 
    "name": [
        ["Назва (рос.)", "Коктейль молочный 2.5% Сливочно-ванильный Paw Patrol Danone т/п 212г"], 
        ["Назва (укр.)", "Коктейль молочний 2.5% Вершково-ванільний Paw Patrol Danone т/п 212г"], 
        ["Коротка назва (рос.)", "Коктейль молочный Слив-ванил Danone 212г"], 
        ["Коротка назва (укр.)", "Коктейль молочний Верш-ваніл Danone 212г"], 
        ["Альтернативне найменування (рос)", "Коктейль молочный Danone Paw Patrol со Сливочно-ванильный 2.5% 212г"], 
        ["Альтернативне найменування (укр)", "Коктейль молочний Danone Paw Patrol Вершково-ванільний 2.5% 212г"]
    ], 
    "misc": [
        ["Смак", "ВЕРШКОВО-ВАНІЛЬНИЙ"], 
        ["Вид продукції", "КОКТЕЙЛЬ МОЛОЧНЫЙ"], 
        ["Ваговий товар", "НІ"], ["Кількість, шт.", "1"], 
        ["Планограма викладення товару", "ТАК"], 
        ["Рекомендовані способи приготування/використання", "Перед вживанням збовтати"]
    ], 
    "nutrition": [
        ["Жири, г/100г", "2.5"], 
        ["Білки, г/100г", "3.2"], 
        ["Вуглеводи, г/100г", "9.9"], 
        ["Жирність, %", "2.5"], 
        ["Калорійність, ккал/100г", "75"], 
        ["кДж/100г", "314"], 
        ["Цукор, г/100г", "9.9"]
    ], 
    "main": [
        ["Метод обробки", "СТЕРИЛІЗАЦІЯ"], 
        ["ГМО", "НІ"], 
        ["Органічний продукт", "НІ"], 
        ["Підходить вегетаріанцям", "ТАК"], 
        ["Підходить веганам", "НІ"]
    ], 
    "ingredients": [
        ["Склад (рос.)", "Молоко нормализованное 95%, сахар, ароматизатор натуральный \"сливочно-ванильный\", стабилизатор каррагинан, краситель бета-каротин"], 
        ["Склад (укр.)", "Молоко нормалізоване 95%, цукор, ароматизатор натуральний \"вершково-ванільний\", стабілізатор карагенан, барвник бета-каротин"], 
        ["Склад (оригінал)", "Normalized milk 95%, sugar, flavoring natural \"creamy-vanilla\", carrageenan stabilizer, beta-carotene dye"]
    ], 
    "retention": [
        ["Термін придатності, дн.", "150"], 
        ["Мін. температура", "+1"], 
        ["Макс. температура", "+20"], 
        ["Температура зберігання, ºC", "+1..+20"], 
        ["Навколишнє середовище", "СУХОЕ МЕСТО/БЕЗ ПОПАДАНИЯ ПРЯМЫХ СОЛНЕЧНЫХ ЛУЧЕЙ"], 
        ["Термін придатності, днів", "150"]
    ]
}

q2 = {
    "Дисплей": [
        "Діагональ дисплею: 50,8 см (20\")", 
        "Роздільна здатність дисплея: 1680 x 1050 пікселів", 
        "Сенсорний екран: Ні", 
        "Яскравість дисплея (типова): 300 кд/м²", 
        "Час відклику: 5 мс", 
        "Контрасність (типічна): 1000:1", 
        "Кут огляду по горизонталі: 170°", 
        "Кут огляду по вертикалі: 170°", 
        "Розмір точки: 0.258", 
        "Горизонтальна частота сканування: 30 - 82 кГц", 
        "Вертикальна частота сканування: 55 - 75 Гц", 
        "Видима область екрану по горизонталі: 43,3 см", 
        "Видима область екрану по вертикалі: 27,1 см"
    ], 
    "Дизайн": [
        "Колір продукту: Сірий", 
        "Сертифікація: TCO’03"
    ], 
    "Порти та інтерфейси": [
        "Кількість портів VGA (D-Sub): 1", 
        "Кількість портів DVI-D: 1"
    ], 
    "Ергономіка": [
        "Слот кабельного блокування: Так", 
        "Тип слоту кабельного блокування: Kensington", 
        "Настроювання висоти: 11 см", 
        "Діапазон кутів обертання: 45 - 45°", 
        "Кут нахилу: -5 - 30°"
    ],
    "Енергоживлення": [
        "Споживча потужність (типічна): 45 Вт", 
        "Споживча потужність (вимк.): 1 Вт", 
        "Споживча потужність (режим економії енергії): 1 Вт"
    ], 
    "Вага та розміри": [
        "Ширина з підставкою: 474 мм", 
        "Глибина з підставкою: 212 мм", 
        "Висота з підставкою: 399 мм", 
        "Вага (з підставкою): 7 кг", 
        "Ширина (без підставки): 47,4 см", 
        "Глибина (без підставки): 5,8 см", 
        "Висота (без підставки): 32 см", 
        "Вага (без підставки): 4,2 кг"
    ], 
    "Інші характеристики": [
        "Вимоги до енергоживлення: 100 - 240 VAC, 50 - 60 Hz"
    ]
}

q3 = {
    "main": [
        ["Бренд", "Rothmans"], 
        ["Фасовка", "пачка"], 
        ["Країна", "Україна"], 
        ["Вид продукції", "Сигарети"], 
        ["Бренд", "Rothmans"], 
        ["Аромат", "Класичний"], 
        ["Вміст нікотину, мг", "0,6"], 
        ["Вміст смол, мг", "8"], 
        ["К-ть в упаковці, шт.", "20"], 
        ["Розмір", "King Size"]
    ]
}
q4 = {
    "main": [
        "Перець пепероні 50%", 
        "вода питна", 
        "цукор білий", 
        "сіль кухонна харчова", 
        "консервант оцтова кислота", 
        "прянощі: зерна гірчиці, перець чорний горошок, лавровий лист, часник, кріп, цибуля."
    ]
}

q5 = {
    "Диаметр ядра": "9/125", 
    "Тип пристрою": "Патч-корд", 
    "Вид з`єднання": "FC-FC", 
    "Вид патч-корду": "Одномодульний", 
    "Довжина кабеля": "5м", 
    "Діаметр кабеля": "2.8мм", 
    "Режим передачі": "Simplex", 
    "Цей продукт є новим": "так", 
    "Стандарт полірування": "UPC/APC"
}

q6 = [
    "Перець пепероні 50%", 
    "вода питна", 
    "цукор білий", 
    "сіль кухонна харчова", 
    "консервант оцтова кислота", 
    "прянощі: зерна гірчиці, перець чорний горошок, лавровий лист, часник, кріп, цибуля."
]

class TFeatures():
    Lang = {
        1: {
            'main': 'Головне',
            'size': 'Розмір',
            'name': 'Назва',
            'misc': 'Різне',
            'nutrition': 'Складники',
            'ingredients': 'Вміст',
            'retention': 'Зберігання',
            'sustainability': 'Стабільність'
        }
    }

    def __init__(self, aLangId: int):
        self.LangId = aLangId

    def Translate(self, aKey: str) -> str:
        return DeepGetByList(self.Lang, [self.LangId, aKey.lower()], aKey)

    def Adjust(self, aObj: object) -> list:
        def Recurs(aObj: object, aDepth: int) -> list:
            Res = []
            if (isinstance(aObj, dict)):
                for xKey, xVal in aObj.items():
                    if (isinstance(xVal, (str, int, float))):
                        Res.append(['i', f'{xKey}: {xVal}'])
                    else:
                        Res.append(['g', self.Translate(xKey)])
                        Res += Recurs(xVal, aDepth + 1)
            elif (isinstance(aObj, list)):
                for xVal in aObj:
                    if (len(xVal) == 2):
                        xVal = ': '.join(xVal)
                    Res.append(['i', xVal])
            return Res
        return Recurs(aObj, 0)

print()
Features = TFeatures(1)
Data1 = Features.Adjust(q5)
for xType, xVal in Data1:
    if (xType == 'g'):
        print()
    print(xVal)
